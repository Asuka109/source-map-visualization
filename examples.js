var examples = [
  {
    "name": "Simple",
    "js": "{\n  1;\n  2;\n  3;\n  if (true) {\n    100;\n  } else {\n    if (false) {\n      200;\n    } else {\n      300;\n    }\n  }\n}\n",
    "map": {
      "version": 3,
      "file": "compiled.js",
      "sources": ["<stdin>"],
      "sourcesContent": ["{1;2;3;if(true)100;else if(false)200;else 300;}\n"],
      "names": [],
      "mappings": "AAAA;AAAC,GAAC;AAAC,GAAC;AAAC,GAAC;AAAC,MAAG,IAAI,EAAC;OAAG;AAAC,SAAK;QAAG,KAAK,EAAC;SAAG;AAAC,WAAK;SAAG;AAAC;;CAAC"
    }
  },
  {
    "name": "CoffeeScript",
    "js": "// Generated by CoffeeScript 2.5.1\n(function() {\n  // Assignment:\n  var cubes, list, math, num, number, opposite, race, square;\n\n  number = 42;\n\n  opposite = true;\n\n  if (opposite) {\n    // Conditions:\n    number = -42;\n  }\n\n  // Functions:\n  square = function(x) {\n    return x * x;\n  };\n\n  // Arrays:\n  list = [1, 2, 3, 4, 5];\n\n  // Objects:\n  math = {\n    root: Math.sqrt,\n    square: square,\n    cube: function(x) {\n      return x * square(x);\n    }\n  };\n\n  // Splats:\n  race = function(winner, ...runners) {\n    return print(winner, runners);\n  };\n\n  if (typeof elvis !== \"undefined\" && elvis !== null) {\n    // Existence:\n    alert(\"I knew it!\");\n  }\n\n  // Array comprehensions:\n  cubes = (function() {\n    var i, len, results;\n    results = [];\n    for (i = 0, len = list.length; i < len; i++) {\n      num = list[i];\n      results.push(math.cube(num));\n    }\n    return results;\n  })();\n\n}).call(this);\n\n//# sourceMappingURL=original.js.map\n",
    "map": {
      "version": 3,
      "file": "original.js",
      "sourceRoot": "",
      "sources": [
        "original.coffee"
      ],
      "names": [],
      "mappings": ";AAAa;EAAA;AAAA,MAAA,KAAA,EAAA,IAAA,EAAA,IAAA,EAAA,GAAA,EAAA,MAAA,EAAA,QAAA,EAAA,IAAA,EAAA;;EACb,MAAA,GAAW;;EACX,QAAA,GAAW;;EAGX,IAAgB,QAAhB;;IAAA,MAAA,GAAS,CAAC,GAAV;GALa;;;EAQb,MAAA,GAAS,QAAA,CAAC,CAAD,CAAA;WAAO,CAAA,GAAI;EAAX,EARI;;;EAWb,IAAA,GAAO,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,EAXM;;;EAcb,IAAA,GACE;IAAA,IAAA,EAAQ,IAAI,CAAC,IAAb;IACA,MAAA,EAAQ,MADR;IAEA,IAAA,EAAQ,QAAA,CAAC,CAAD,CAAA;aAAO,CAAA,GAAI,MAAA,CAAO,CAAP;IAAX;EAFR,EAfW;;;EAoBb,IAAA,GAAO,QAAA,CAAC,MAAD,EAAA,GAAS,OAAT,CAAA;WACL,KAAA,CAAM,MAAN,EAAc,OAAd;EADK;;EAIP,IAAsB,8CAAtB;;IAAA,KAAA,CAAM,YAAN,EAAA;GAxBa;;;EA2Bb,KAAA;;AAAS;IAAA,KAAA,sCAAA;;mBAAA,IAAI,CAAC,IAAL,CAAU,GAAV;IAAA,CAAA;;;AA3BI",
      "sourcesContent": [
        "# Assignment:\nnumber   = 42\nopposite = true\n\n# Conditions:\nnumber = -42 if opposite\n\n# Functions:\nsquare = (x) -> x * x\n\n# Arrays:\nlist = [1, 2, 3, 4, 5]\n\n# Objects:\nmath =\n  root:   Math.sqrt\n  square: square\n  cube:   (x) -> x * square x\n\n# Splats:\nrace = (winner, runners...) ->\n  print winner, runners\n\n# Existence:\nalert \"I knew it!\" if elvis?\n\n# Array comprehensions:\ncubes = (math.cube num for num in list)\n"
      ]
    }
  }
];
